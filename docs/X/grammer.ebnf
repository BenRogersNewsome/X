(*
    Grammer for X
*)


(* Keywords *)

forallKwd = "forall" | "\-/" ;
therexKwd = "therex" | "-]" ;
inKwd = "in" | "(-";
assertKwd = "assert" | "|-";


(* Identifiers *)

letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

alphaNumUnderscore = letter | digit | "_";

identifier = { alphaNumUnderscore }+;
mathSymbol = "+" | "-" | "*" | "/" | "/\" | "!" | "^";


(* Arithmetic Math *)

grouping = "(" mathExpr ")";

primary = grouping | identifier;
unary = [ mathSymbol ] primary;
binary = unary ( mathSymbol unary )*;
mathExpression = binary;
equality = mathExpression "=" mathExpression;

letStatement = "let" ( 
    set creation |
    set element creation |
    struct instantiation
);


(* Logic Statements *)

forallStmt = forallKwd identifier ("," identifier)* inKwd identifier;
therexeStmt = therexKwd identifier ("," identifier)* inKwd identifier;
logicalStmt = (forallStmt | therexeStmt)+;


(* Inline Statements *)

argumentList = identifier ("," Identifier)* [","];

operationDefinition = symbol ":" identifier [symbol identifier] -> identifier;

structSignature ::= "(" identifier ";" argumentList ")";


(* Block Statements *)

logicalBlock = assertKwd logicalStmt "{"
    equality*
"}";

setCreation = "(" identifier ")" "be" identifier;

setElementCreation = identifier "(-" identifier;

structInstantiation = structSignature "be" identifier["<" argumentList ">"];

structDefinition =
"struct" identifier "("
    identifier ";"
    (
        (operationDefinition | identifier) ","
    )*
")" "{"
    logic_block*
"}";
