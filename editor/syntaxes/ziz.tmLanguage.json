{
   "scopeName": "source.ziz",
   "patterns": [{ "include": "#struct" }, {"include": "#let"}, {"include": "#comment"}],
   "repository": {

      "comment": {
         "begin": "#{1,6}",
         "end": "\\n",
         "beginCaptures": {
            "0": {"name": "comment"}
         },
         "patterns": [
            {
               "match": ".+",
               "name": "comment"
            }
         ]
      },

      "struct": {  
         "begin": "struct",
         "beginCaptures": {
            "0": {"name": "keyword"}
         },
         "end": "\\n",
         "patterns": [
            {"include": "#struct-identity-definitions"},
            {"include": "#struct-signature-def"},
            {"include": "#struct-name"}
         ]
      },

      "let":  {
         "begin": "let",
         "beginCaptures": {
            "0": {"name": "keyword"}
         },
         "end": "\\n",
         "patterns": [
            {
               "match": "be",
               "name": "keyword"
            },
            {
               "include": "#struct-signature"
            }
         ]
      },

      "struct-signature-def": {
         "begin": "\\(",
         "end": "\\)",
         "beginCaptures": {
            "0": { "name": "punctuation.section" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.section" }
          },
          "patterns": [
            {
					"include": "#parameter"
				},
            {
					"match": ";",
					"name": "punctuation.separator.array.json"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.json"
				},
            {
               "include": "#operation-definition"
            }
          ]
      },

      "struct-signature": {
         "begin": "\\(",
         "end": "\\)",
         "beginCaptures": {
            "0": { "name": "punctuation.section" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.section" }
          },
         "patterns": [
            {
					"include": "#struct-member"
				},
            {
					"match": ";",
					"name": "punctuation.separator.array.json"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.json"
				}
         ]
      },

      "struct-identity-definitions": {
         "begin": "\\{",
         "end": "\\{",
         "beginCaptures": {
            "0": { "name": "punctuation.section" }
         },
         "endCaptures": {
            "0": { "name": "punctuation.section" }
         },
         "patterns": [
            {"include": "#math-expression"}
         ]
      },

      "struct-instantiation": {
         "patterns": [
            {"include": "#struct-name"}
         ]
      },

      "struct-parameter-list": {
         "begin": "\\<",
         "end": "\\>",
         "patterns": [
            {"include": "#struct-name"},
            {
					"match": ",",
					"name": "punctuation.separator.array.json"
				}
         ]
      },

      "operation-definition": {
         "patterns": [
            {"match": "->", "name": "keyword.operator.key-value"},
            {"match": ":", "name": "keyword.operator.key-value"},
            {"include": "#math-operator"},
            {"include": "#ident"}
         ]
      },

      "ident": {
         "match": "\\w+"
      },

      "struct-member": {
         "match": "\\w+",
         "name": "variable.other.member"
      },

      "variable": {
         "name": "variable.other",
         "match": "\\w+"
      },

      "parameter": {
         "match": "\\w+",
         "name": "variable.parameter"
      },

      "struct-name": {
         "name": "entity.name.class",
         "match": "\\w+"
      },

      "keyword": {
         "name": "keyword",
         "match": "struct|let"
      },

      "logical-operation": {
         "name": "keyword.operator",
         "match": "\\\\-\\/|-]|\\(-|->"
      },

      "math-expression": {
         "patterns": [
            {"include": "#math-paren"},
            {"include": "#math-operator"},
            {"include": "#variable"}
         ]
      },

      "math-paren": {
         "begin": "\\(",
         "end": "\\(",
         "patterns": [
            {"include": "#math-expression"}
         ]
      },

      "math-operator": {
         "name": "keyword.operator",
         "match": "\\+|\\*|\\/|-"
      }
   }
}